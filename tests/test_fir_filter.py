import pytest
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from filters.fir_filter_lowpass import lowpass_fir_filter_firwin, lowpass_fir_filter_manual
from filters.fir_filter_highpass import highpass_fir_filter_manual, highpass_fir_filter_firwin
from filters.fir_filter_bandpass import bandpass_fir_filter_manual, bandpass_fir_filter_firwin

# Test for lowpass FIR filter using firwin method
def test_lowpass_fir_filter_firwin():
    """
    Test the length of the FIR coefficients generated by the lowpass_fir_filter_firwin function.
    """
    fir_coeff = lowpass_fir_filter_firwin(cutoff_freq=0.3, num_taps=51)
    assert len(fir_coeff) == 51, "Number of coefficients is incorrect"

# Test for lowpass FIR filter coefficients comparison
def test_lowpass_fir_filter_coefficients():
    """
    Compare the FIR coefficients generated by the lowpass_fir_filter_firwin and lowpass_fir_filter_manual functions.
    """
    fir_coefficients_firwin = lowpass_fir_filter_firwin(cutoff_freq=0.3, num_taps=51)
    fir_coefficients_manual = lowpass_fir_filter_manual(cutoff_freq=0.3, num_taps=51)
    assert fir_coefficients_manual == pytest.approx(fir_coefficients_firwin, rel=1e-7, abs=1e-3), "Coefficients are not equal"

# Test for highpass FIR filter coefficients comparison
def test_highpass_fir_filter_coefficients():
    """
    Compare the FIR coefficients generated by the highpass_fir_filter_firwin and highpass_fir_filter_manual functions.
    """
    fir_coefficients_firwin = highpass_fir_filter_firwin(cutoff_freq=0.3, num_taps=51)
    fir_coefficients_manual = highpass_fir_filter_manual(cutoff_freq=0.3, num_taps=51)
    assert fir_coefficients_manual == pytest.approx(fir_coefficients_firwin, rel=1e-7, abs=1e-3), "Highpass coefficients are not equal"

# Test for bandpass FIR filter coefficients comparison
def test_bandpass_fir_filter_coefficients():
    """
    Compare the FIR coefficients generated by the bandpass_fir_filter_firwin and bandpass_fir_filter_manual functions.
    """
    fir_coefficients_firwin = bandpass_fir_filter_firwin(lowcut=0.2, highcut=0.4, num_taps=51)
    fir_coefficients_manual = bandpass_fir_filter_manual(lowcut=0.2, highcut=0.4, num_taps=51)
    assert fir_coefficients_manual == pytest.approx(fir_coefficients_firwin, rel=1e-7, abs=1e-3), "Bandpass coefficients are not equal"

# Additional tests for edge cases and invalid inputs
def test_lowpass_fir_filter_invalid_cutoff():
    """
    Test the lowpass FIR filter function with an invalid cutoff frequency.
    """
    with pytest.raises(ValueError):
        lowpass_fir_filter_firwin(cutoff_freq=1.5, num_taps=51)

def test_highpass_fir_filter_invalid_cutoff():
    """
    Test the highpass FIR filter function with an invalid cutoff frequency.
    """
    with pytest.raises(ValueError):
        highpass_fir_filter_firwin(cutoff_freq=-0.1, num_taps=21)

def test_bandpass_fir_filter_invalid_cutoff():
    """
    Test the bandpass FIR filter function with invalid cutoff frequencies.
    """
    with pytest.raises(ValueError):
        bandpass_fir_filter_firwin(lowcut=0.5, highcut=0.4, num_taps=51)

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import pytest
import numpy as np
from filters.fir_filter_lowpass import lowpass_fir_filter_firwin, lowpass_fir_filter_manual, FilterError as FilterErrorLp
from filters.fir_filter_highpass import highpass_fir_filter_manual, highpass_fir_filter_firwin, FilterError as FilterErrorHp
from filters.fir_filter_bandpass import bandpass_fir_filter_manual, bandpass_fir_filter_firwin, FilterError as FilterErrorBp

# Test for lowpass FIR filter using firwin method
def test_lowpass_fir_filter_firwin():
    """
    Test the length of the FIR coefficients generated by the lowpass_fir_filter_firwin function.
    """
    fir_coeff = lowpass_fir_filter_firwin(cutoff_freq=0.3, num_taps=51)
    assert len(fir_coeff) == 51, "Number of coefficients is incorrect"

# Test for lowpass FIR filter coefficients comparison
def test_lowpass_fir_filter_coefficients():
    """
    Compare the FIR coefficients generated by the lowpass_fir_filter_firwin and lowpass_fir_filter_manual functions.
    """
    fir_coefficients_firwin = lowpass_fir_filter_firwin(cutoff_freq=0.3, num_taps=51)
    fir_coefficients_manual = lowpass_fir_filter_manual(cutoff_freq=0.3, num_taps=51)
    assert fir_coefficients_manual == pytest.approx(fir_coefficients_firwin, abs=1e-3, rel=1e-7)

# Additional tests for lowpass FIR filter
def test_lowpass_fir_filter_manual_valid():
    """
    Test lowpass FIR filter with valid parameters.
    """
    cutoff_freq = 0.3
    num_taps = 51
    coeffs = lowpass_fir_filter_manual(cutoff_freq, num_taps)
    assert isinstance(coeffs, np.ndarray)
    assert len(coeffs) == num_taps

def test_lowpass_fir_filter_manual_invalid_cutoff():
    """
    Test lowpass FIR filter with invalid cutoff frequency.
    """
    with pytest.raises(FilterErrorLp):
        lowpass_fir_filter_manual(cutoff_freq=1.5, num_taps=51)

def test_lowpass_fir_filter_manual_invalid_num_taps():
    """
    Test lowpass FIR filter with invalid number of taps.
    """
    with pytest.raises(FilterErrorLp):
        lowpass_fir_filter_manual(cutoff_freq=0.3, num_taps=-10)

def test_lowpass_fir_filter_manual_zero_cutoff():
    """
    Test lowpass FIR filter with zero cutoff frequency.
    """
    with pytest.raises(FilterErrorLp):
        lowpass_fir_filter_manual(cutoff_freq=0, num_taps=51)

def test_lowpass_fir_filter_manual_edge_cutoff():
    """
    Test lowpass FIR filter with edge cutoff frequency.
    """
    num_taps = 51
    coeffs = lowpass_fir_filter_manual(cutoff_freq=1, num_taps=51)
    assert isinstance(coeffs, np.ndarray)
    assert len(coeffs) == num_taps

# Test for highpass FIR filter using firwin method
def test_highpass_fir_filter_firwin():
    """
    Test the length of the FIR coefficients generated by the highpass_fir_filter_firwin function.
    """
    fir_coeff = highpass_fir_filter_firwin(cutoff_freq=0.3, num_taps=51)
    assert len(fir_coeff) == 51, "Number of coefficients is incorrect"

# Test for highpass FIR filter coefficients comparison
def test_highpass_fir_filter_coefficients():
    """
    Compare the FIR coefficients generated by the highpass_fir_filter_firwin and highpass_fir_filter_manual functions.
    """
    fir_coefficients_firwin = highpass_fir_filter_firwin(cutoff_freq=0.3, num_taps=51)
    fir_coefficients_manual = highpass_fir_filter_manual(cutoff_freq=0.3, num_taps=51)
    assert fir_coefficients_manual == pytest.approx(fir_coefficients_firwin, rel=1e-7, abs=1e-3), "Coefficients are not equal"

# Additional tests for highpass FIR filter
def test_highpass_fir_filter_manual_valid():
    """
    Test highpass FIR filter with valid parameters.
    """
    cutoff_freq = 0.3
    num_taps = 51
    coeffs = highpass_fir_filter_manual(cutoff_freq, num_taps)
    assert isinstance(coeffs, np.ndarray)
    assert len(coeffs) == num_taps

def test_highpass_fir_filter_manual_invalid_cutoff():
    """
    Test highpass FIR filter with invalid cutoff frequency.
    """
    with pytest.raises(FilterErrorHp):
        highpass_fir_filter_manual(cutoff_freq=1.5, num_taps=51)

def test_highpass_fir_filter_manual_invalid_num_taps():
    """
    Test highpass FIR filter with invalid number of taps.
    """
    with pytest.raises(FilterErrorHp):
        highpass_fir_filter_manual(cutoff_freq=0.3, num_taps=-10)

def test_highpass_fir_filter_manual_zero_cutoff():
    """
    Test highpass FIR filter with zero cutoff frequency.
    """
    with pytest.raises(FilterErrorHp):
        highpass_fir_filter_manual(cutoff_freq=0, num_taps=51)

def test_highpass_fir_filter_manual_edge_cutoff():
    """
    Test highpass FIR filter with edge cutoff frequency.
    """
    num_taps = 51
    coeffs = highpass_fir_filter_manual(cutoff_freq=1, num_taps=51)
    assert isinstance(coeffs, np.ndarray)
    assert len(coeffs) == num_taps

# Test for bandpass FIR filter using firwin method
def test_bandpass_fir_filter_firwin():
    """
    Test the length of the FIR coefficients generated by the bandpass_fir_filter_firwin function.
    """
    fir_coeff = bandpass_fir_filter_firwin(lowcut=0.2, highcut=0.4, num_taps=51)
    assert len(fir_coeff) == 51, "Number of coefficients is incorrect"

# Test for bandpass FIR filter coefficients comparison
def test_bandpass_fir_filter_coefficients():
    """
    Compare the FIR coefficients generated by the bandpass_fir_filter_firwin and bandpass_fir_filter_manual functions.
    """
    fir_coefficients_firwin = bandpass_fir_filter_firwin(lowcut=0.2, highcut=0.4, num_taps=51)
    fir_coefficients_manual = bandpass_fir_filter_manual(lowcut=0.2, highcut=0.4, num_taps=51)
    assert fir_coefficients_manual == pytest.approx(fir_coefficients_firwin, rel=1e-7, abs=1e-3), "Coefficients are not equal"

# Additional tests for bandpass FIR filter
def test_bandpass_fir_filter_manual_valid():
    """
    Test bandpass FIR filter with valid parameters.
    """
    lowcut = 0.2
    highcut = 0.4
    num_taps = 51
    coeffs = bandpass_fir_filter_manual(lowcut, highcut, num_taps)
    assert isinstance(coeffs, np.ndarray)
    assert len(coeffs) == num_taps

def test_bandpass_fir_filter_manual_invalid_lowcut():
    """
    Test bandpass FIR filter with invalid lowcut frequency.
    """
    with pytest.raises(FilterErrorBp):
        bandpass_fir_filter_manual(lowcut=1.5, highcut=0.4, num_taps=51)

def test_bandpass_fir_filter_manual_invalid_highcut():
    """
    Test bandpass FIR filter with invalid highcut frequency.
    """
    with pytest.raises(FilterErrorBp):
        bandpass_fir_filter_manual(lowcut=0.2, highcut=1.5, num_taps=51)

def test_bandpass_fir_filter_manual_invalid_num_taps():
    """
    Test bandpass FIR filter with invalid number of taps.
    """
    with pytest.raises(FilterErrorBp):
        bandpass_fir_filter_manual(lowcut=0.2, highcut=0.4, num_taps=-10)

def test_bandpass_fir_filter_manual_zero_lowcut():
    """
    Test bandpass FIR filter with zero lowcut frequency.
    """
    with pytest.raises(FilterErrorBp):
        bandpass_fir_filter_manual(lowcut=0, highcut=0.4, num_taps=51)

def test_bandpass_fir_filter_manual_edge_highcut():
    """
    Test bandpass FIR filter with edge highcut frequency.
    """
    num_taps=51
    coeffs = bandpass_fir_filter_manual(lowcut=0.2, highcut=1, num_taps=51)
    assert isinstance(coeffs, np.ndarray)
    assert len(coeffs) == num_taps

# Test invalid inputs for lowpass filter
def test_invalid_inputs_lowpass():
    """
    Test invalid inputs for the lowpass FIR filter.
    """
    with pytest.raises(FilterErrorLp):
        lowpass_fir_filter_manual(-0.1, 51)
    with pytest.raises(FilterErrorLp):
        lowpass_fir_filter_manual(1.5, 51)
    with pytest.raises(FilterErrorLp):
        lowpass_fir_filter_manual(0.3, -10)

# Test invalid inputs for highpass filter
def test_invalid_inputs_highpass():
    """
    Test invalid inputs for the highpass FIR filter.
    """
    with pytest.raises(FilterErrorHp):
        highpass_fir_filter_manual(-0.1, 51)
    with pytest.raises(FilterErrorHp):
        highpass_fir_filter_manual(1.5, 51)
    with pytest.raises(FilterErrorHp):
        highpass_fir_filter_manual(0.3, -10)

# Test invalid inputs for bandpass filter
def test_invalid_inputs_bandpass():
    """
    Test invalid inputs for the bandpass FIR filter.
    """
    with pytest.raises(FilterErrorBp):
        bandpass_fir_filter_manual(-0.1, 0.5, 51)
    with pytest.raises(FilterErrorBp):
        bandpass_fir_filter_manual(0.2, 1.5, 51)
    with pytest.raises(FilterErrorBp):
        bandpass_fir_filter_manual(0.5, 0.2, 51)
    with pytest.raises(FilterErrorBp):
        bandpass_fir_filter_manual(0.2, 0.5, -10)

# Test plotting functions (these tests will not check the plots visually but will ensure no errors are raised)
def test_plot_lowpass_filter_responses():
    """
    Test the plotting of lowpass filter responses.
    """
    from filters.fir_filter_lowpass import plot_filter_responses
    plot_filter_responses(cutoff_freq=0.3, num_taps=51, sample_rate=1000)

def test_plot_highpass_filter_responses():
    """
    Test the plotting of highpass filter responses.
    """
    from filters.fir_filter_highpass import plot_highpass_filter_responses
    plot_highpass_filter_responses(cutoff_freq=0.3, num_taps=51, sample_rate=1000)

def test_plot_bandpass_filter_responses():
    """
    Test the plotting of bandpass filter responses.
    """
    from filters.fir_filter_bandpass import plot_bandpass_filter_responses
    plot_bandpass_filter_responses(lowcut=0.2, highcut=0.4, num_taps=51, sample_rate=1000)

def test_plot_lowpass_filter_coefficients():
    """
    Test the plotting of lowpass filter coefficients.
    """
    from filters.fir_filter_lowpass import plot_filter_coefficients
    plot_filter_coefficients(cutoff_freq=0.3, num_taps=51)

def test_plot_highpass_filter_coefficients():
    """
    Test the plotting of highpass filter coefficients.
    """
    from filters.fir_filter_highpass import plot_highpass_filter_coefficients
    plot_highpass_filter_coefficients(cutoff_freq=0.3, num_taps=51)

def test_plot_bandpass_filter_coefficients():
    """
    Test the plotting of bandpass filter coefficients.
    """
    from filters.fir_filter_bandpass import plot_bandpass_filter_coefficients
    plot_bandpass_filter_coefficients(lowcut=0.2, highcut=0.4, num_taps=51)

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import firwin

def sinc_function(x: np.ndarray) -> np.ndarray:
    """
    Sinc function, where sinc(0) = 1.

    Parameters:
    x (numpy.ndarray): The input array.

    Returns:
    numpy.ndarray: The result of the sinc function for each element.
    """
    return np.sinc(x / np.pi)

def lowpass_fir_filter_opt_manual(cutoff_freq: float, num_taps: int) -> np.ndarray:
    """
    Generates symmetric coefficients for a FIR low-pass filter using the sinc function and applies a Hamming window.

    Parameters:
    num_taps (int): The number of filter coefficients (taps).
    cutoff_freq (float): The cutoff frequency of the filter (normalized to the Nyquist frequency, i.e., 0 < cutoff_freq <= 1).

    Returns:
    numpy.ndarray: The normalized filter coefficients after applying the Hamming window.
    """
    if not isinstance(num_taps, int) or num_taps <= 0:
        raise ValueError("num_taps must be a positive integer.")
    if not (0 < cutoff_freq <= 1):
        raise ValueError("cutoff_freq must be in the range (0, 1].")

    M = num_taps - 1
    n = np.arange(num_taps)
    n_centered = n - M / 2  # Center the taps around M / 2
    
    # Handle the special case where n == M / 2
    h = np.where(n_centered == 0, 2 * cutoff_freq, (2 * cutoff_freq) * sinc_function(3.15 * cutoff_freq * n_centered)) #Vectorization
    
    # Apply the Hamming window
    window = 0.54 - 0.46 * np.cos(2 * np.pi * n / M)
    h *= window
    
    # Normalize coefficients
    h /= np.sum(h)
    return h

def lowpass_fir_filter_firwin(cutoff_freq: float, num_taps: int) -> np.ndarray:
    """
    Generates coefficients for a FIR low-pass filter using the firwin function from scipy.

    Parameters:
    num_taps (int): The number of filter coefficients (taps).
    cutoff_freq (float): The cutoff frequency of the filter (normalized to the Nyquist frequency, i.e., 0 < cutoff_freq <= 1).

    Returns:
    numpy.ndarray: The filter coefficients.
    """
    if not isinstance(num_taps, int) or num_taps <= 0:
        raise ValueError("num_taps must be a positive integer.")
    if not (0 < cutoff_freq <= 1):
        raise ValueError("cutoff_freq must be in the range (0, 1].")

    return firwin(num_taps, cutoff=cutoff_freq, window="hamming")

def plot_filter_opt_responses(cutoff_freq: float, num_taps: int, sample_rate: int):
    """
    Plots the frequency responses of the filters generated by both manual and firwin methods.
    """
    if not isinstance(num_taps, int) or num_taps <= 0:
        raise ValueError("num_taps must be a positive integer.")
    if not (0 < cutoff_freq <= 1):
        raise ValueError("cutoff_freq must be in the range (0, 1].")
    if not isinstance(sample_rate, int) or sample_rate <= 0:
        raise ValueError("sample_rate must be a positive integer.")

    h_manual = lowpass_fir_filter_opt_manual(cutoff_freq, num_taps)
    h_firwin = lowpass_fir_filter_firwin(cutoff_freq, num_taps)

    w_manual, h_response_manual = np.fft.fftfreq(1024, 1 / sample_rate), np.abs(np.fft.fft(h_manual, 1024))
    w_firwin, h_response_firwin = np.fft.fftfreq(1024, 1 / sample_rate), np.abs(np.fft.fft(h_firwin, 1024))

    plt.plot(w_manual[:512], 20 * np.log10(h_response_manual[:512]), label='Manual')
    plt.plot(w_firwin[:512], 20 * np.log10(h_response_firwin[:512]), label='Firwin')
    plt.title('Frequency Response')
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('Magnitude (dB)')
    plt.legend()
    plt.grid()
    plt.show()

def plot_filter_opt_coefficients(cutoff_freq: float, num_taps: int):
    """
    Plots the filter coefficients generated by both manual and firwin methods side by side.
    """
    if not isinstance(num_taps, int) or num_taps <= 0:
        raise ValueError("num_taps must be a positive integer.")
    if not (0 < cutoff_freq <= 1):
        raise ValueError("cutoff_freq must be in the range (0, 1].")

    h_manual = lowpass_fir_filter_opt_manual(cutoff_freq, num_taps)
    h_firwin = lowpass_fir_filter_firwin(cutoff_freq, num_taps)

    plt.figure(figsize=(12, 6))

    plt.subplot(1, 2, 1)
    plt.stem(h_manual)
    plt.title('Manual Optimized FIR Lowpass Filter Coefficients')
    plt.xlabel('Tap')
    plt.ylabel('Coefficient Value')
    plt.grid()

    plt.subplot(1, 2, 2)
    plt.stem(h_firwin)
    plt.title('Firwin Optimized FIR Lowpass Filter Coefficients')
    plt.xlabel('Tap')
    plt.ylabel('Coefficient Value')
    plt.grid()

    plt.tight_layout()
    plt.show()

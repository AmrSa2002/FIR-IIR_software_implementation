import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import firwin, freqz

def sinc_function(x: float) -> float:
    """Sinc function, where sinc(0) = 1."""
    return np.sinc(x / np.pi)

def highpass_fir_filter_opt_manual(cutoff_freq: float, num_taps: int) -> np.ndarray:
    """
    Generates symmetric coefficients for a FIR high-pass filter using the sinc function and applies a Hamming window.
    """
    if not isinstance(num_taps, int) or num_taps <= 0:
        raise ValueError("num_taps must be a positive integer.")
    if not (0 < cutoff_freq <= 1):
        raise ValueError("cutoff_freq must be in the range (0, 1].")

    wc = np.pi * cutoff_freq  # Normalized cutoff frequency in radians
    M = num_taps // 2  # Middle index for symmetric filter

    n = np.arange(num_taps)  # Tap indices
    h = np.where( # Selects values based on the given condition.
        n == M,
        1 - wc / np.pi,
        -np.sin(wc * (n - M)) / (np.pi * (n - M))
    )

    # Apply Hamming window
    hamming_window = 0.54 - 0.46 * np.cos(2 * np.pi * n / (num_taps - 1))
    h *= hamming_window

    return h

def highpass_fir_filter_firwin(cutoff_freq: float, num_taps: int) -> np.ndarray:
    """Generates coefficients for a FIR high-pass filter using the firwin function from scipy."""
    if not isinstance(num_taps, int) or num_taps <= 0:
        raise ValueError("num_taps must be a positive integer.")
    if not (0 < cutoff_freq <= 1):
        raise ValueError("cutoff_freq must be in the range (0, 1].")

    return firwin(num_taps, cutoff=cutoff_freq, pass_zero=False, window="hamming")

def plot_highpass_filter_opt_responses(cutoff_freq: float, num_taps: int, sample_rate: int):
    """Plots the frequency responses of the high-pass filters generated by both manual and firwin methods."""
    h_manual = highpass_fir_filter_opt_manual(cutoff_freq, num_taps)
    h_firwin = highpass_fir_filter_firwin(cutoff_freq, num_taps)

    w_manual, h_response_manual = freqz(h_manual, worN=8000)
    w_firwin, h_response_firwin = freqz(h_firwin, worN=8000)

    plt.figure()
    plt.plot(0.5 * sample_rate * w_manual / np.pi, np.abs(h_response_manual), 'b', label='Manual')
    plt.plot(0.5 * sample_rate * w_firwin / np.pi, np.abs(h_response_firwin), 'r', label='firwin')
    plt.title("Optimized FIR High-pass Filter Frequency Response")
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('Gain')
    plt.legend()
    plt.grid()
    plt.show()

def plot_highpass_filter_opt_coefficients(cutoff_freq: float, num_taps: int):
    """Plots the high-pass filter coefficients generated by both manual and firwin methods side by side."""
    h_manual = highpass_fir_filter_opt_manual(cutoff_freq, num_taps)
    h_firwin = highpass_fir_filter_firwin(cutoff_freq, num_taps)

    plt.figure(figsize=(12, 6))

    plt.subplot(1, 2, 1)
    plt.stem(h_manual)
    plt.title('Manual Optimized Highpass Filter Coefficients')
    plt.xlabel('Tap')
    plt.ylabel('Coefficient Value')
    plt.grid()

    plt.subplot(1, 2, 2)
    plt.stem(h_firwin)
    plt.title('Firwin Highpass Filter Coefficients')
    plt.xlabel('Tap')
    plt.ylabel('Coefficient Value')
    plt.grid()

    plt.tight_layout()
    plt.show()



